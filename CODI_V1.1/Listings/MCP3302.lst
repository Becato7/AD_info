C51 COMPILER V9.59.0.0   MCP3302                                                           06/15/2025 11:48:38 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MCP3302
OBJECT MODULE PLACED IN .\Objects\MCP3302.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE MCP3302.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\M
                    -CP3302.lst) TABS(2) OBJECT(.\Objects\MCP3302.obj)

line level    source

   1          #include "MCP3302.h"          //Cridem la llibreria MCP3302.h
   2          #include <intrins.h>          //Cridem la llibreria intrins.h
   3          
   4          static void spi_delay(void) { //Declarem la funció spi_delay
   5   1        _nop_();                    //Permet estar 1 cicle de màquina sense fer res
   6   1        _nop_();                    //Permet estar 1 cicle de màquina sense fer res
   7   1      }
   8          
   9          void spi_write_bit(unsigned char b) { //Declarem la funció spi_write_bit(unsigned char b) que permet escri
             -ure un bit en SPI
  10   1          SPI_MOSI = b;                     //Posem el pin de MOSI al valor 0/1 que hagi entrat per la funció
  11   1          SPI_CLK = 1;                      //Posem el pin de CLK a 1 
  12   1          spi_delay();                      //Delay de 2 cicles de màquina, és a dir 2us
  13   1          SPI_CLK = 0;                      //Posem el pin de CLK a 0 
  14   1          spi_delay();                      //Delay de 2 cicles de màquina, és a dir 2us
  15   1      }
  16          
  17          unsigned char spi_transfer_byte(unsigned char out) {  //Declarem la funció spi_transfer_byte(unsigned char 
             -out)
  18   1          unsigned char in = 0;                             //Declarem la variable in
  19   1          signed char i;                                    //Declarem la variable i
  20   1          for (i = 7; i >= 0; i--) {                        //Bucle que va de 7 a 0 per enviar de msb a lsb
  21   2              spi_write_bit((out >> i) & 1);                //Cridem la funció spi_write_bit i li entrem el bit correspo
             -nent del byte que volem enviar
  22   2              in <<= 1;                                     //Ens guardem el bit que llegim pel pin MISO
  23   2              in |= SPI_MISO;                               //Ens guardem el bit que llegim pel pin MISO
  24   2          }
  25   1          return in;                                        //Retornem el valor llegir
  26   1      }
  27          
  28          unsigned int MCP3302_ReadChannel(unsigned char ch) {
  29   1                                                            //Configuració del canal (single-ended):
  30   1                                                            //Start=1, SGL/DIFF=1, D2=0, D1/D0 = ch
  31   1          unsigned char command = 0x18 | (ch & 0x03);       //Declarem la variable command amb el valor del canal q
             -ue volem llegir després command serà la comanda a enviar0x18 = b00011000
  32   1          unsigned char rx_buf[3];                          //Declarem l'array de rebuda de dades
  33   1          unsigned int result;                              //Declarem la variable on es guardaran els resultats
  34   1          
  35   1          SPI_CS = 0;                                       //Posem el CS de l'SPI a 0
  36   1          rx_buf[0] = spi_transfer_byte(command);           //Enviem el byte del comanda i ens guardem els valors
  37   1          rx_buf[1] = spi_transfer_byte(0x00);              //Enviem un byte buit i ens guardem els valors
  38   1          rx_buf[2] = spi_transfer_byte(0x00);              //Enviem un byte buit i ens guardem els valors
  39   1          SPI_CS = 1;                                       //Posem el CS de l'SPI a 1
  40   1      
  41   1          result = (rx_buf[1] & 0x3F);                      //Agafem els 6 bits útils (màscara 00111111)
  42   1          result = result << 6;                             //Desplaçem 6 posicions a l'esquerra
  43   1          result |= (rx_buf[2] >> 2);                       //Agafem els 6 bits alts del byte 3 i els unim amb els del b
             -yte 2
  44   1      
  45   1          return result;                                    //Retornem el resultat
  46   1      }
  47          
  48          unsigned int MCP3302_ReadChannel12(unsigned char ch) {//Declarem la funció MCP3302_ReadChannel12(unsigned 
             -char ch)
C51 COMPILER V9.59.0.0   MCP3302                                                           06/15/2025 11:48:38 PAGE 2   

  49   1          return MCP3302_ReadChannel(ch) & 0x0FFF;          //Guardem unicament un byte i mig, elidint el primer que 
             -indica el signe del valor
  50   1      }
  51          
  52          float MCP3302_ToVoltage(unsigned int adc12, float vref) { //Declarem la funció MCP3302_ToVoltage(unsigned 
             -int adc12, float vref) on se li entra el valor del adc i el voltatje de referència
  53   1          return (vref * adc12) / 4096.0f;                      //Retornem el valor de voltatje fent la conversió amb el vo
             -ltatje de referència i la resolució de l'ADC que es de 4096 bits
  54   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    159    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       9
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
