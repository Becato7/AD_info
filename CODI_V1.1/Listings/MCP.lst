C51 COMPILER V9.59.0.0   MCP                                                               06/10/2025 19:20:22 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MCP
OBJECT MODULE PLACED IN .\Objects\MCP.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE MCP.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\MCP.l
                    -st) TABS(2) OBJECT(.\Objects\MCP.obj)

line level    source

   1          #include "MCP.h"
   2          
   3          // --------------------
   4          // Inicialització SPI hardware
   5          // --------------------
   6          /*
   7          | Bit | Nom          | Valor | Significat                                  |
   8          | --- | ------------ | ----- | ------------------------------------------- |
   9          | 7   | WCOL         | 0     | No col·lisió d’escriptura                   |
  10          | 6   | SPEN         | 1     | SPI **habilitat** (es fa també a sota)      |
  11          | 5   | MSTR         | 1     | SPI en **mode master**                      |
  12          | 4   | CPOL         | 1     | Clock Polarity: **idle = alt**              |
  13          | 3   | CPHA         | 0     | Clock Phase: mostra dades a primer flanc    |
  14          | 2   | SPR1         | 0     | Velocitat: (SPR1\:SPR0) = `00` ? **Fosc/4** |
  15          | 1   | SPR0         | 0     | idem                                        |
  16          | 0   | bit reservat | 0     | No s’utilitza                               |
  17          */
  18          void SPI_Init(void) {
  19   1        SPCON = 0x50;     // Master mode, CPOL=0, CPHA=0, Fosc/4
  20   1        SPCON |= 0x10;    // SPI Enable
  21   1      }
  22          
  23          // --------------------
  24          // Envia i rep 1 byte SPI
  25          // --------------------
  26          unsigned char SPI_Transfer(unsigned char value) {
  27   1        SPDAT = value;
  28   1        while (!(SPSTA & 0x80));  // Espera a que SPIF = 1
  29   1        return SPDAT;
  30   1      }
  31          
  32          // Llegeix un canal del MCP3302 (0 a 3)
  33          unsigned int MCP3302_ReadChannel(unsigned char channel) {
  34   1          unsigned char start_bit = 0x01;
  35   1          unsigned char command, msb, lsb;
  36   1          unsigned int result;
  37   1      
  38   1          // Construcció de la comanda per MCP3302 (single-ended)
  39   1          // Primer byte: start bit (0x01)
  40   1          // Segon byte: SGL/DIF (1), D2, D1, D0, x, x, x, x
  41   1          // Ex: canal 0 -> 0xA0 (10100000)
  42   1          command = 0x80 | ((channel & 0x03) << 4);
  43   1          SPI_CS = 0;                  // Activa el xip
  44   1          SPI_Transfer(start_bit);     // Start bit
  45   1          msb = SPI_Transfer(command); // Comanda
  46   1          lsb = SPI_Transfer(0x00);    // Dummy byte per llegir LSB
  47   1          SPI_CS = 1;                  // Desactiva el xip
  48   1      
  49   1          result = ((msb & 0x1F) << 8) | lsb; // 13 bits útils
  50   1          return result;
  51   1      }
  52          
  53          // Converteix valor ADC a volts
  54          float MCP3302_ConvertToVoltage(unsigned int adc_value) {
C51 COMPILER V9.59.0.0   MCP                                                               06/10/2025 19:20:22 PAGE 2   

  55   1        float vref = 5.0;
  56   1          return (vref * adc_value) / 8192.0; // 13 bits = 2^13 = 8192
  57   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     98    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       4
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
