C51 COMPILER V9.59.0.0   LTC                                                               06/10/2025 17:20:05 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE LTC
OBJECT MODULE PLACED IN .\Objects\LTC.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE LTC.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\LTC.l
                    -st) TABS(2) OBJECT(.\Objects\LTC.obj)

line level    source

   1          #include "LTC.h"
   2          
   3          // --------------------
   4          // Inicialització SPI hardware
   5          // --------------------
   6          /*
   7          | Bit | Nom          | Valor | Significat                                  |
   8          | --- | ------------ | ----- | ------------------------------------------- |
   9          | 7   | WCOL         | 0     | No col·lisió d’escriptura                   |
  10          | 6   | SPEN         | 1     | SPI **habilitat** (es fa també a sota)      |
  11          | 5   | MSTR         | 1     | SPI en **mode master**                      |
  12          | 4   | CPOL         | 1     | Clock Polarity: **idle = alt**              |
  13          | 3   | CPHA         | 0     | Clock Phase: mostra dades a primer flanc    |
  14          | 2   | SPR1         | 0     | Velocitat: (SPR1\:SPR0) = `00` ? **Fosc/4** |
  15          | 1   | SPR0         | 0     | idem                                        |
  16          | 0   | bit reservat | 0     | No s’utilitza                               |
  17          */
  18          void SPI_Init(void) {
  19   1        SPCON = 0x50;     // Master mode, CPOL=0, CPHA=0, Fosc/4
*** ERROR C202 IN LINE 19 OF LTC.c: 'SPCON': undefined identifier
  20   1        SPCON |= 0x10;    // SPI Enable
*** ERROR C202 IN LINE 20 OF LTC.c: 'SPCON': undefined identifier
  21   1      }
  22          
  23          // --------------------
  24          // Envia i rep 1 byte SPI
  25          // --------------------
  26          unsigned char SPI_Transfer(unsigned char value) {
  27   1        SPDAT = value;
*** ERROR C202 IN LINE 27 OF LTC.c: 'SPDAT': undefined identifier
  28   1        while (!(SPSTA & 0x80));  // Espera a que SPIF = 1
*** ERROR C202 IN LINE 28 OF LTC.c: 'SPSTA': undefined identifier
  29   1        return SPDAT;
*** ERROR C202 IN LINE 29 OF LTC.c: 'SPDAT': undefined identifier
  30   1      }
  31          
  32          // --------------------
  33          // Llegeix un canal del LTC1296
  34          // --------------------
  35          /*
  36          | Canal | Codi binari | Hex    |
  37          | ----- | ----------- | ------ |
  38          | CH0   | `11000111`  | `0xC7` |
  39          | CH1   | `11100111`  | `0xE7` |
  40          | CH2   | `11001111`  | `0xCF` |
  41          | CH3   | `11101111`  | `0xEF` |
  42          | CH4   | `11010111`  | `0xD7` |
  43          | CH5   | `11110111`  | `0xF7` |
  44          | CH6   | `11011111`  | `0xDF` |
  45          | CH7   | `11111111`  | `0xFF` |*/
  46          unsigned int LTC_ReadChannel(unsigned char command) {
  47   1        unsigned char msb, lsb, comanda;
  48   1        unsigned int result;
  49   1        switch(command){
C51 COMPILER V9.59.0.0   LTC                                                               06/10/2025 17:20:05 PAGE 2   

  50   2          case 0:
  51   2            comanda = 0xC7;
  52   2            break;
  53   2          case 1:
  54   2            comanda = 0xE7;
  55   2            break;
  56   2          case 2:
  57   2            comanda = 0xCF;
  58   2            break;
  59   2          case 3:
  60   2            comanda = 0xEF;
  61   2            break;
  62   2          case 4:
  63   2            comanda = 0xD7;
  64   2            break;
  65   2          case 5:
  66   2            comanda = 0xF7;
  67   2            break;
  68   2          case 6:
  69   2            comanda = 0xDF;
  70   2            break;
  71   2          case 7:
  72   2            comanda = 0xFF;
  73   2            break;
  74   2        }
  75   1        SPI_CS = 0;                // Activa el xip
  76   1        SPI_Transfer(comanda);     // Envia la comanda (ex: 0xC7 per canal 0)
  77   1        msb = SPI_Transfer(0x00);  // Llegeix primer byte
  78   1        lsb = SPI_Transfer(0x00);  // Llegeix segon byte
  79   1        SPI_CS = 1;                // Desactiva el xip
  80   1      
  81   1        result = ((msb << 8) | lsb) >> 3;  // Només els 12 bits útils
  82   1        return result;
  83   1      }
  84          
  85          float convert_to_voltage(unsigned int adc_value) {
  86   1          return (5.0 * adc_value) / 4096.0;
  87   1      }

C51 COMPILATION COMPLETE.  0 WARNING(S),  5 ERROR(S)
